name: Build Documentation

on:
  workflow_call:
    inputs:
      environment_name:
        description: 'Environment name for deployment'
        required: true
        type: string
      deployment_type:
        description: 'Type of deployment: pr, push, or release'
        required: true
        type: string
      target_branch:
        description: 'Target branch for deployment'
        required: false
        type: string
        default: 'main'
      version_override:
        description: 'Override version (for releases)'
        required: false
        type: string
    outputs:
      deploy-url:
        description: "The deployment URL"
        value: ${{ jobs.build.outputs.deploy-url }}
      version:
        description: "The generated version"
        value: ${{ jobs.build.outputs.version }}
      artifact-name:
        description: "The name of the uploaded artifact"
        value: ${{ jobs.build.outputs.artifact-name }}

jobs:
  build:
    name: Build Documentation
    runs-on: ubuntu-latest
    outputs:
      deploy-url: ${{ steps.deployment.outputs.page_url }}
      version: ${{ steps.calver.outputs.version }}
      artifact-name: ${{ steps.upload.outputs.artifact-name }}
    environment:
      name: ${{ inputs.environment_name }}
      url: ${{ steps.deployment.outputs.page_url }}${{ steps.branch-setup.outputs.path-suffix }}
    defaults:
      run:
        shell: bash -el {0}
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for versioning

      - name: Setup branch and paths
        id: branch-setup
        run: |
          if [ "${{ inputs.deployment_type }}" == "pr" ]; then
            branch_slug=$(./.github/slugify.sh ${{ github.head_ref || github.ref_name }})
            echo "BRANCH_SLUG=$branch_slug" >> $GITHUB_ENV
            echo "path-suffix=$branch_slug" >> $GITHUB_OUTPUT
          elif [ "${{ inputs.deployment_type }}" == "push" ]; then
            echo "BRANCH_SLUG=main" >> $GITHUB_ENV  
            echo "path-suffix=" >> $GITHUB_OUTPUT
          else
            # release
            echo "BRANCH_SLUG=release" >> $GITHUB_ENV
            echo "path-suffix=" >> $GITHUB_OUTPUT
          fi

      - name: Generate version
        id: calver
        run: |
          if [ -n "${{ inputs.version_override }}" ]; then
            version="${{ inputs.version_override }}"
          else
            # Generate Calver in YY.M.DD.increment+[git short sha] format (PEP 440 compliant)
            today=$(date +'%y.%-m.%-d')
            short_sha=$(git rev-parse --short HEAD)
            
            if [ "${{ inputs.deployment_type }}" == "pr" ]; then
              # For PRs, use hour/minute for uniqueness
              build_num=$(date +'%H%M')
            else
              # For push/release, use a counter based on commits today
              build_num=$(git rev-list --count --since="$(date +%Y-%m-%d)" HEAD)
            fi
            
            # Use PEP 440 compliant format: YY.M.DD.increment+gitSHA
            version="${today}.${build_num}+${short_sha}"
          fi
          
          echo "Generated version: $version"
          echo "version=$version" >> $GITHUB_OUTPUT
          
          # Update setup.py with the version for Sphinx to use
          if [ -f "cli/setup.py" ]; then
            sed -i.bak "s/version=\"[^\"]*\"/version=\"$version\"/" cli/setup.py
            echo "Updated setup.py with version: $version"
          fi

      - name: Setup Conda
        uses: conda-incubator/setup-miniconda@v3
        with:
          auto-update-conda: false
          python-version: 3.10.10
          channels: conda-forge,defaults
          channel-priority: true
          environment-file: environment.yml
          activate-environment: edbook

      - name: ðŸš§ Build versioned documentation
        id: build-versioned
        run: |
          # Build documentation with version structure
          mkdir -p versioned-docs/main versioned-docs/${{ env.BRANCH_SLUG }}
          
          # Build each project
          cd projects
          for project in */; do
            if [ -d "$project" ] && [ -f "$project/conf.py" ]; then
              echo "Building project: $project"
              mkdir -p "../versioned-docs/main/$project"
              mkdir -p "../versioned-docs/${{ env.BRANCH_SLUG }}/$project"
              
              # Create empty hoverlist file if missing (for sphinxcontrib-hoverrole)
              if [ ! -f "$project/LIST_OF_HOVER_TERMS.json" ]; then
                echo "[]" > "$project/LIST_OF_HOVER_TERMS.json"
                echo "Created empty LIST_OF_HOVER_TERMS.json for $project"
              fi
              
              # Verify the file was created and has valid JSON
              if [ -f "$project/LIST_OF_HOVER_TERMS.json" ]; then
                if ! python3 -m json.tool "$project/LIST_OF_HOVER_TERMS.json" > /dev/null 2>&1; then
                  echo "Invalid JSON in LIST_OF_HOVER_TERMS.json for $project, recreating..."
                  echo "[]" > "$project/LIST_OF_HOVER_TERMS.json"
                fi
              fi
              
              # Build for current branch/version
              echo "Building $project for ${{ env.BRANCH_SLUG }}..."
              cd "$project"
              if ! sphinx-build -b html . "../../versioned-docs/${{ env.BRANCH_SLUG }}/$project" --keep-going; then
                echo "Warning: Build failed for $project on ${{ env.BRANCH_SLUG }}, continuing..."
              fi
              cd ..
              
              # For push deployments, also build for main
              if [ "${{ inputs.deployment_type }}" == "push" ]; then
                echo "Building $project for main archive..."
                cd "$project"
                if ! sphinx-build -b html . "../../versioned-docs/main/$project" --keep-going; then
                  echo "Warning: Build failed for $project on main archive, continuing..."
                fi
                cd ..
              elif [ "${{ inputs.deployment_type }}" == "pr" ]; then
                # For PRs, copy to main directory as well for version comparison
                echo "Copying $project to main directory..."
                cd "$project"
                if ! sphinx-build -b html . "../../versioned-docs/main/$project" --keep-going; then
                  echo "Warning: Build failed for $project on main copy, continuing..."
                fi
                cd ..
              fi
            fi
          done
          
          cd ..

      - name: ðŸ“‚ Prepare deployment structure
        run: |
          # Different deployment strategies based on type
          if [ "${{ inputs.deployment_type }}" == "pr" ]; then
            # PR: Create branch-specific structure with forsida as landing page
            if [ -d "versioned-docs/${{ env.BRANCH_SLUG }}/forsida" ] && [ -f "versioned-docs/${{ env.BRANCH_SLUG }}/forsida/index.html" ]; then
              echo "Using forsida project as branch landing page"
              cp -r versioned-docs/${{ env.BRANCH_SLUG }}/forsida/* versioned-docs/${{ env.BRANCH_SLUG }}/
              
              # Create root redirect to branch
              echo '<!DOCTYPE html>' > versioned-docs/index.html
              echo '<html lang="is">' >> versioned-docs/index.html
              echo '<head>' >> versioned-docs/index.html
              echo '    <meta charset="UTF-8">' >> versioned-docs/index.html
              echo '    <meta name="viewport" content="width=device-width, initial-scale=1.0">' >> versioned-docs/index.html
              echo '    <title>Edbook PR Preview</title>' >> versioned-docs/index.html
              echo "    <meta http-equiv=\"refresh\" content=\"0; url=${{ env.BRANCH_SLUG }}/\">" >> versioned-docs/index.html
              echo '</head>' >> versioned-docs/index.html
              echo '<body>' >> versioned-docs/index.html
              echo "    <p>Redirecting to <a href=\"${{ env.BRANCH_SLUG }}/\">PR preview</a>...</p>" >> versioned-docs/index.html
              echo '</body>' >> versioned-docs/index.html
              echo '</html>' >> versioned-docs/index.html
            else
              echo "Forsida project not found, using fallback structure"
              echo '<!DOCTYPE html>' > versioned-docs/${{ env.BRANCH_SLUG }}/index.html
              echo '<html lang="is">' >> versioned-docs/${{ env.BRANCH_SLUG }}/index.html
              echo '<head>' >> versioned-docs/${{ env.BRANCH_SLUG }}/index.html
              echo '    <meta charset="UTF-8">' >> versioned-docs/${{ env.BRANCH_SLUG }}/index.html
              echo '    <meta name="viewport" content="width=device-width, initial-scale=1.0">' >> versioned-docs/${{ env.BRANCH_SLUG }}/index.html
              echo '    <title>Edbook PR Preview</title>' >> versioned-docs/${{ env.BRANCH_SLUG }}/index.html
              echo '</head>' >> versioned-docs/${{ env.BRANCH_SLUG }}/index.html
              echo '<body>' >> versioned-docs/${{ env.BRANCH_SLUG }}/index.html
              echo '    <h1>ðŸ“š Edbook PR Preview</h1>' >> versioned-docs/${{ env.BRANCH_SLUG }}/index.html
              echo '    <p>This branch contains updated documentation projects.</p>' >> versioned-docs/${{ env.BRANCH_SLUG }}/index.html
              echo '</body>' >> versioned-docs/${{ env.BRANCH_SLUG }}/index.html
              echo '</html>' >> versioned-docs/${{ env.BRANCH_SLUG }}/index.html
            fi
            
          elif [ "${{ inputs.deployment_type }}" == "push" ]; then
            # Push: Prepare for edbook.github.io deployment (forsida as root)
            if [ -d "versioned-docs/main/forsida" ] && [ -f "versioned-docs/main/forsida/index.html" ]; then
              echo "Preparing forsida as root for production deployment"
              # Create _build directory structure expected by push workflow
              mkdir -p _build
              cp -r versioned-docs/main/forsida/* _build/
              cp -r versioned-docs/main/* _build/
              # Remove duplicate forsida directory
              rm -rf _build/forsida
            else
              echo "Forsida not found, copying all projects to build"
              mkdir -p _build  
              cp -r versioned-docs/main/* _build/
            fi
            
          else
            # Release: Create versioned release structure
            echo "Preparing release deployment structure"
            # Implementation depends on release strategy
            cp -r versioned-docs/main/* versioned-docs/
          fi

      - name: Setup Pages (for PR deployments)
        if: inputs.deployment_type == 'pr'
        uses: actions/configure-pages@v5

      - name: Upload artifact (for PR deployments)
        if: inputs.deployment_type == 'pr'
        id: upload
        uses: actions/upload-pages-artifact@v3
        with:
          path: versioned-docs

      - name: Deploy to GitHub Pages (for PR deployments)
        if: inputs.deployment_type == 'pr'
        id: deployment
        uses: actions/deploy-pages@v4
        with:
          preview: true

      - name: Set outputs for push deployments
        if: inputs.deployment_type == 'push'
        id: push-outputs
        run: |
          echo "deploy-url=https://edbook.hi.is" >> $GITHUB_OUTPUT
          echo "artifact-name=build-files" >> $GITHUB_OUTPUT