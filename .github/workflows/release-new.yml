name: Release

permissions:
  contents: write
  pages: write
  id-token: write

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version increment type'
        required: true
        type: choice
        options:
        - patch
        - minor
        - major
        default: patch
  push:
    tags:
      - 'v*'

jobs:
  generate-version:
    name: Generate Release Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.calver.outputs.version }}
      tag: ${{ steps.calver.outputs.tag }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate Calver release version
        id: calver
        run: |
          if [ "${{ github.event_name }}" == "push" ] && [[ "${{ github.ref }}" == refs/tags/* ]]; then
            # Extract version from tag
            version="${{ github.ref_name }}"
            tag="${{ github.ref_name }}"
          else
            # Generate new Calver version for workflow_dispatch
            today=$(date +'%y.%-m.%-d')
            
            # Get the latest tag for today to determine increment
            latest_tag=$(git tag -l "v${today}.*" --sort=-version:refname | head -n1)
            
            if [ -z "$latest_tag" ]; then
              # First release of the day
              increment=1
            else
              # Extract increment from latest tag and add 1
              increment=$(echo "$latest_tag" | sed "s/v${today}\.//" | cut -d'+' -f1)
              increment=$((increment + 1))
            fi
            
            short_sha=$(git rev-parse --short HEAD)
            version="v${today}.${increment}+${short_sha}"
            tag="v${today}.${increment}"
          fi
          
          echo "Generated release version: $version"
          echo "Generated release tag: $tag"
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "tag=$tag" >> $GITHUB_OUTPUT

  build-docs:
    name: Build Release Documentation
    needs: generate-version
    uses: ./.github/workflows/build-docs.yml
    with:
      environment_name: release
      deployment_type: release
      version_override: ${{ needs.generate-version.outputs.version }}
    permissions:
      contents: read
      pages: write
      id-token: write

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [generate-version, build-docs]
    if: github.event_name == 'workflow_dispatch'
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Update setup.py version
        run: |
          sed -i.bak "s/version=\"[^\"]*\"/version=\"${{ needs.generate-version.outputs.version }}\"/" cli/setup.py
          echo "Updated setup.py with version: ${{ needs.generate-version.outputs.version }}"

      - name: Commit version update
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add cli/setup.py
          git commit -m "chore: bump version to ${{ needs.generate-version.outputs.version }}"
          git push

      - name: Create and push tag
        run: |
          git tag "${{ needs.generate-version.outputs.tag }}"
          git push origin "${{ needs.generate-version.outputs.tag }}"

      - name: Generate release notes
        id: release-notes
        run: |
          # Get commits since last tag
          last_tag=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          if [ -n "$last_tag" ]; then
            commits=$(git log --pretty=format:"- %s" ${last_tag}..HEAD)
          else
            commits=$(git log --pretty=format:"- %s" --max-count=10)
          fi
          
          notes="## ðŸ“š Documentation Release ${{ needs.generate-version.outputs.version }}

### What's Changed
$commits

### ðŸ”— Links
- **Documentation**: https://edbook.hi.is
- **Version**: \`${{ needs.generate-version.outputs.version }}\`
- **Build**: Generated with modern Sphinx build system

---
ðŸ¤– Generated with [Claude Code](https://claude.ai/code)"

          echo "notes<<EOF" >> $GITHUB_OUTPUT
          echo "$notes" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.generate-version.outputs.tag }}
          release_name: Release ${{ needs.generate-version.outputs.version }}
          body: ${{ steps.release-notes.outputs.notes }}
          draft: false
          prerelease: false

  notify-discord-release:
    needs: [generate-version, build-docs, create-release]
    name: Notify Discord (release)
    runs-on: ubuntu-20.04
    if: always() && needs.build-docs.result == 'success'
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
      - name: Notify release
        run: |
          if [ "${{ needs.create-release.result }}" == "success" ]; then
            content_title="ðŸŽ‰ NÃ½ ÃºtgÃ¡fa Ã­ boÃ°i!"
            color=65280
            description="NÃ½ ÃºtgÃ¡fa af Edbook hefur veriÃ° gefin Ãºt"
          else
            content_title="ðŸ“š SkjÃ¶l uppfÃ¦rÃ°"
            color=2061822  
            description="SkjÃ¶l hafa veriÃ° endurbyggÃ°"
          fi
          
          title="Release ${{ needs.generate-version.outputs.version }}"
          url="https://github.com/${{ github.repository }}/releases/tag/${{ needs.generate-version.outputs.tag }}"

          payload=$(cat <<EOF
          {
            "content": "$content_title",
            "avatar_url": "https://www.shareicon.net/data/128x128/2015/08/28/92005_social-media_512x512.png",
            "embeds": [
              {
                "title": "$title",
                "description": "$description",
                "url": "$url",
                "color": $color,
                "fields": [
                  {
                    "name": "Version",
                    "value": "${{ needs.generate-version.outputs.version }}"
                  },
                  {
                    "name": "Documentation",
                    "value": "[SkoÃ°a Ã¡ edbook](https://edbook.hi.is)"
                  }
                ]
              }
            ]
          }
          EOF
          )
          ./.github/discord.sh  \
            -w ${{ secrets.DISCORD_WEBHOOK }} \
            -c "$payload"