#----------------------------------------------
# TODO:
#   Fix "if" conditions in each job, feels redundant.
#   There is alot of replication of steps here since Github actions seems limited.
name: edbook
on:
  push:
    paths-ignore:
      - "**/README.md"
    branches-ignore:
      - main
jobs:
  setup:
    name: Setup
    runs-on: ubuntu-20.04
    outputs:
      branch_name: ${{ steps.extract_branch.outputs.branch_name }}
    steps:
      - name: Extract branch name
        id: extract_branch
        shell: bash
        run: |
          echo "::set-output name=branch_name::$(echo ${GITHUB_REF#refs/heads/})"
      - name: Check out repository
        uses: actions/checkout@v2
      - name: Set up python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: "1.1.6"
          virtualenvs-create: true
          virtualenvs-in-project: true
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install dependencies
        run: poetry install
        if: steps.cached_poetry_dependencies.outputs.cache-hit != 'true'
  build-all:
    needs: [setup]
    name: Build projects
    runs-on: ubuntu-20.04
    outputs:
      artifact: ${{ steps.zip_build.outputs.artifact }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v2
      - name: Set up python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: "1.1.6"
          virtualenvs-create: true
          virtualenvs-in-project: true
      - name: Build
        id: build
        run: |
          source .venv/bin/activate
          poetry --version
          make build-all
          ls -al _build
      - name: zip-build
        id: zip_build
        run: |
          echo ${{ github.workspace }}
          ls ${{ github.workspace }}/_build
          export BUILD_PREFIX=build-${{ runner.os }}
          export BUILD_HASH=${{ hashFiles('_build') }}
          echo ${BUILD_HASH}
          zip -r "edbook-${BUILD_PREFIX}-${BUILD_HASH}" _build/*
          ls -al ${{ github.workspace }}
          echo "::set-output name=artifact::$(echo edbook-${BUILD_PREFIX}-${BUILD_HASH}.zip)"
      - name: Upload build artifact
        uses: actions/upload-artifact@v2
        with:
          name: artifacts
          path: ${{steps.zip_build.outputs.artifact}}
  deploy-feature-branch:
    needs: [setup, build-all]
    name: Deploy feature branch
    runs-on: ubuntu-20.04
    steps:
      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_KEY" > ~/.ssh/staging.key
          chmod 600 ~/.ssh/staging.key
          cat >>~/.ssh/config <<END
          Host staging
            HostName $SSH_HOST
            User $SSH_USER
            IdentityFile ~/.ssh/staging.key
            StrictHostKeyChecking no
          END
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_KEY: ${{ secrets.SSH_KEY }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
      - name: Test SSH connection
        run: |
          ssh -o BatchMode=yes -o ConnectTimeout=5 staging echo ok 2>&1
      - name: Get build artifact
        uses: actions/download-artifact@v2
        with:
          name: artifacts
      - name: Deploy artifacts
        env:
          BASE_DIR: ~/.public_html/staging/edbook
          BUILD_DIR: ~/.public_html/staging/edbook/${{ needs.setup.outputs.branch_name }}
        run: |
          ls -al .
          ssh staging 'mkdir -p '"'$BASE_DIR'"''
          scp ${{ github.workspace }}/*.zip staging:${BASE_DIR}/build.zip
          cat >>${{ github.workspace }}/deploy.sh <<END
          #!/bin/bash
          ls ${BUILD_DIR}
          mv ${BUILD_DIR} ${BUILD_DIR}.delete || true
          mkdir -p ${BUILD_DIR}
          unzip -o ${BASE_DIR}/build.zip -d $BUILD_DIR/
          mv $BUILD_DIR/_build/* $BUILD_DIR/
          rm -r $BUILD_DIR/_build ${BUILD_DIR}.delete ${BASE_DIR}/build.zip
          END
          chmod +x ${{ github.workspace }}/deploy.sh
          scp ${{ github.workspace }}/deploy.sh staging:~/
          ssh staging 'bash ~/deploy.sh'
          ssh staging 'rm ~/deploy.sh'
