name: edbook
env:
  SSH_USER: ${{ secrets.EDBOOK_SSH_USER }}
  SSH_KEY: ${{ secrets.EDBOOK_SSH_KEY }}
  SSH_HOST: ${{ secrets.EDBOOK_SSH_HOST }}
on:
  push:
    paths-ignore:
      - "**/README.md"
jobs:
  setup:
    name: Setup
    runs-on: ubuntu-20.04
    outputs:
      branch_name: ${{ steps.extract_branch.outputs.branch_name }}
    steps:
      - name: Extract branch name
        id: extract_branch
        shell: bash
        run: |
          echo "::set-output name=branch_name::$(echo ${GITHUB_REF#refs/heads/})"
      - name: Check out repository
        uses: actions/checkout@v2
      - name: Set up python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9.6'
      - name: Load cached $HOME/.local
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: ~/.local
          key: dotlocal-${{ runner.os }}-${{ hashFiles('.github/workflows/feature.yml') }}
      - name: Install Poetry
        uses: snok/install-poetry@v1.1.6
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
      - name: Install dependencies
        run: poetry install
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
  build-all:
    needs: [setup]
    name: Build and deploy
    runs-on: ubuntu-20.04
    steps:
      - name: Check out repository
        uses: actions/checkout@v2
      - name: Set up python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9.6'
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}-${{ hashFiles('.github/workflows/feature.yml') }}
      - name: Install Poetry
        uses: snok/install-poetry@v1.1.6
      - name: Configure SSH
        run: |
          echo "#### Creating ~/.ssh/config from secrets ####"
          mkdir -p ~/.ssh/
          echo "$SSH_KEY" > ~/.ssh/staging.key
          chmod 600 ~/.ssh/staging.key
          cat >>~/.ssh/config <<END
          Host staging
            HostName $SSH_HOST
            User $SSH_USER
            IdentityFile ~/.ssh/staging.key
            StrictHostKeyChecking no
          END
      - name: Test SSH connection
        run: |
          ssh -o BatchMode=yes -o ConnectTimeout=5 staging echo ok 2>&1
      - name: Build
        id: build
        run: |
          ls -al
          poetry --version
          make build-all
          echo "#### Build destination ####"
          ls -d ${{ github.workspace }}/_build/*
      - name: Deploy feature
        if: github.ref != 'refs/heads/main'
        run: |
          if [ -z ${{env.ACT}} ]; then
          ./${{ github.workspace }}/.github/deploy.sh ${{ github.workspace }} "~/public_html" "staging/edbook/${{ needs.setup.outputs.branch_name }}"
          fi
      - name: Deploy production
        if: github.ref == 'refs/heads/main'
        run: |
          if [ -z ${{env.ACT}} ]; then
            ./${{ github.workspace }}/.github/deploy.sh ${{ github.workspace }} "~/public_html" "prod"
          fi
      - name: Discord notification
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        uses: Ilshidur/action-discord@0.3.2
        with:
          args: '{{ EVENT_PAYLOAD.head_commit.author.name }} pushed _{{ EVENT_PAYLOAD.head_commit.message }}_ to _{{ needs.setup.outputs.branch_name }}_.'
